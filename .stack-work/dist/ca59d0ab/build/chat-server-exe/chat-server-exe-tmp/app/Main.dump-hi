
==================== FINAL INTERFACE ====================
2017-11-19 22:11:15.8625269 UTC

interface main@main:Main 8002
  interface hash: fcab73012bdaededefb4a0c34615eaba
  ABI hash: d7ef905920799759744087f0ebc05eb9
  export-list hash: 1c6a0218fcabc11734dc244a3a561501
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 188324fe4341d368802f1aa605d88daa
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.addToList
  Main.checkList
  Main.handleHeloText
  Main.leaveOrMessageHandler
  Main.main
  Main.mainLoop
  Main.messageHandler
  Main.runConn
  Main.Msg
module dependencies:
package dependencies: base-4.9.1.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      network-2.6.3.2@network-2.6.3.2-F0OcsS89osODGCGHNf1FTk
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         network-2.6.3.2@network-2.6.3.2-F0OcsS89osODGCGHNf1FTk:Network.Socket
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Control.Concurrent e3f6962e2eee72e46a7f524818b5ed3e
import  -/  base-4.9.1.0:Control.Concurrent.Chan 06c91854465eeea1d7d22181493ecefa
import  -/  base-4.9.1.0:Control.Exception 292fff19f09f7eea1a1573871191d564
import  -/  base-4.9.1.0:Control.Exception.Base f4debb4f4369b99523a6b8027855f0db
import  -/  base-4.9.1.0:Control.Monad f915f187cea611986ebb12dbc69279ab
import  -/  base-4.9.1.0:Control.Monad.Fix d7825266d910438d4b097ec7a618c693
import  -/  base-4.9.1.0:Data.Foldable 254e836c2d813d34e47feb29bb8d40ed
import  -/  base-4.9.1.0:Data.Function e669266e2bc3ac37fceae74061959895
import  -/  base-4.9.1.0:Data.Tuple b07f695e7ce8fe20cc8a32abf62f60ec
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.Conc.Sync 18bcf7264dc8f03029975495d151af25
import  -/  base-4.9.1.0:GHC.Exception 1acf4f6b8fc586edbea7602d96aff4df
import  -/  base-4.9.1.0:GHC.IO.Handle cb8bbcf28331624bf008e1abd21fcddd
import  -/  base-4.9.1.0:GHC.IO.Handle.Text e0147bd867839fcc2c3f2eace90b4d47
import  -/  base-4.9.1.0:GHC.IO.Handle.Types 638c6e55b150de2630213031097f67d4
import  -/  base-4.9.1.0:GHC.IO.IOMode 1d36b5ec8d1a8ce9c868319c0a88f401
import  -/  base-4.9.1.0:GHC.List d11eb227c1c6fbfd89bb781d72eaea0d
import  -/  base-4.9.1.0:GHC.Num 38b8aac8807c096c7f3ca3c1eff02939
import  -/  base-4.9.1.0:GHC.Show eca5834daba3b6a2bbbe64ab52056707
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  base-4.9.1.0:System.Environment 438c0b0bc0f94461b9c946d062a7eab9
import  -/  base-4.9.1.0:System.IO 5daf3f384209c11d9566e3409af8ec5d
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  network-2.6.3.2@network-2.6.3.2-F0OcsS89osODGCGHNf1FTk:Network.Socket e2e659f1c7cc333004207b8e0bae86f5
import  -/  network-2.6.3.2@network-2.6.3.2-F0OcsS89osODGCGHNf1FTk:Network.Socket.Types 4069a95f9ee733839da5467ed0ac257c
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
a8e95d42cb415daa96c8fa5b4d5a74c0
  $wlvl ::
    Foreign.C.Types.CInt
    -> Network.Socket.Types.Family
    -> Network.Socket.Types.SocketType
    -> Network.Socket.Types.ProtocolNumber
    -> GHC.MVar.MVar Network.Socket.Types.SocketStatus
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6, Strictness: <L,U(U)><L,U><L,U><L,U(U)><L,U(U)><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: Foreign.C.Types.CInt)
                   (ww1 :: Network.Socket.Types.Family)
                   (ww2 :: Network.Socket.Types.SocketType)
                   (ww3 :: Network.Socket.Types.ProtocolNumber)
                   (ww4 :: GHC.MVar.MVar Network.Socket.Types.SocketStatus)
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Network.Socket.$wsetSocketOption
                        ww
                        Network.Socket.ReuseAddr
                        Main.addToList1
                        w of ds1 { (#,#) ipv ipv1 ->
                 case ww4 of ww6 { GHC.MVar.MVar ww7 ->
                 case Network.Socket.$wbind
                        ww
                        ww7
                        Main.main5
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Network.Socket.$wlisten
                        ww
                        ww7
                        Main.main4
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.newMVar#
                        @ GHC.Prim.RealWorld
                        @ (Control.Concurrent.Chan.ChItem (GHC.Types.Int, GHC.Base.String))
                        ipv4 of ds { (#,#) ipv6 ipv7 ->
                 case GHC.Prim.newMVar#
                        @ GHC.Prim.RealWorld
                        @ (GHC.MVar.MVar
                             (Control.Concurrent.Chan.ChItem (GHC.Types.Int, GHC.Base.String)))
                        ipv6 of ds4 { (#,#) ipv8 ipv9 ->
                 let {
                   hole :: GHC.MVar.MVar
                             (Control.Concurrent.Chan.ChItem (GHC.Types.Int, GHC.Base.String))
                     {- Strictness: m -}
                   = GHC.MVar.MVar
                       @ (Control.Concurrent.Chan.ChItem (GHC.Types.Int, GHC.Base.String))
                       ipv7
                 } in
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ (GHC.MVar.MVar
                             (Control.Concurrent.Chan.ChItem (GHC.Types.Int, GHC.Base.String)))
                        ipv9
                        hole
                        ipv8 of s2# { DEFAULT ->
                 case GHC.Prim.newMVar#
                        @ GHC.Prim.RealWorld
                        @ (GHC.MVar.MVar
                             (Control.Concurrent.Chan.ChItem (GHC.Types.Int, GHC.Base.String)))
                        s2# of ds5 { (#,#) ipv10 ipv11 ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ (GHC.MVar.MVar
                             (Control.Concurrent.Chan.ChItem (GHC.Types.Int, GHC.Base.String)))
                        ipv11
                        hole
                        ipv10 of s2#1 { DEFAULT ->
                 case GHC.Prim.fork#
                        @ (GHC.Types.IO ())
                        (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         letrec {
                           x :: GHC.Prim.State# GHC.Prim.RealWorld
                                -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                             {- Arity: 1, Strictness: <S,U> -}
                           = \ (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case Control.Concurrent.Chan.$wreadChan
                                    @ (GHC.Types.Int, GHC.Base.String)
                                    ipv9
                                    ipv11
                                    eta1 of ds6 { (#,#) ipv12 ipv13 ->
                             case ipv13 of wild { (,) ds7 ds8 -> x ipv12 } }
                         } in
                         GHC.Prim.catch#
                           @ ()
                           @ GHC.Exception.SomeException
                           x
                           GHC.Conc.Sync.childHandler1
                           eta)
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <()>_R))
                        s2#1 of ds6 { (#,#) ipv12 ipv13 ->
                 Main.$wmainLoop
                   ww
                   ww1
                   ww2
                   ww3
                   ww7
                   Main.main_serverPort
                   (Control.Concurrent.Chan.Chan
                      @ (GHC.Types.Int, GHC.Base.String)
                      ipv9
                      ipv11)
                   Main.main3
                   ipv12 } } } } } } } } } }) -}
21da77edabdc0230fc9e1bdad79fd538
  $wmainLoop ::
    Foreign.C.Types.CInt
    -> Network.Socket.Types.Family
    -> Network.Socket.Types.SocketType
    -> Network.Socket.Types.ProtocolNumber
    -> GHC.Prim.MVar#
         GHC.Prim.RealWorld Network.Socket.Types.SocketStatus
    -> Network.Socket.Types.PortNumber
    -> Control.Concurrent.Chan.Chan Main.Msg
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 9,
     Strictness: <L,U(U)><S,U><L,U><L,U(U)><S,U><L,U(U)><L,U(U,U)><L,U(U)><S,U>,
     Inline: [0] -}
7e7deee940ef2ec755f9a0e378a8356b
  $wrunConn ::
    Foreign.C.Types.CInt
    -> GHC.Prim.MVar#
         GHC.Prim.RealWorld Network.Socket.Types.SocketStatus
    -> Network.Socket.Types.SockAddr
    -> Control.Concurrent.Chan.Chan Main.Msg
    -> GHC.Types.Int
    -> Network.Socket.Types.Socket
    -> Network.Socket.Types.PortNumber
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 8,
     Strictness: <L,U(U)><S,U><L,U><L,1*U(U,U)><L,U(U)><L,U(U(U),A,A,A,U(U))><L,U(U)><S,U>,
     Inline: [0] -}
f4c7da5d252b420bf9c5a099dc18276c
  type Msg = (GHC.Types.Int, GHC.Base.String)
3bba2087d05346a3f149e431b7946ba3
  addToList ::
    GHC.Base.String
    -> [(GHC.Types.Int, GHC.Base.String)]
    -> [(GHC.Types.Int, GHC.Base.String)]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: (\ (item :: GHC.Base.String)
                   (ds :: [(GHC.Types.Int, GHC.Base.String)]) ->
                 case ds of wild {
                   []
                   -> GHC.Types.:
                        @ (GHC.Types.Int, GHC.Base.String)
                        (Main.addToList1, item)
                        (GHC.Types.[] @ (GHC.Types.Int, GHC.Base.String))
                   : ipv ipv1
                   -> case Main.checkList item wild of wild1 {
                        GHC.Types.False
                        -> GHC.Types.:
                             @ (GHC.Types.Int, GHC.Base.String)
                             (case GHC.List.$wlenAcc
                                     @ (GHC.Types.Int, GHC.Base.String)
                                     wild
                                     0# of ww2 { DEFAULT ->
                              GHC.Types.I# (GHC.Prim.+# ww2 1#) },
                              item)
                             wild
                        GHC.Types.True -> wild } }) -}
51e3856f4dd344b50e6609ad143eaed6
  addToList1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
7df7391009a1cf98de20d4a4cc801ddd
  checkList ::
    GHC.Base.String
    -> [(GHC.Types.Int, GHC.Base.String)] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
c06126db537340c5857fb0ba73a30f0f
  handleHeloText ::
    GHC.IO.Handle.Types.Handle
    -> Network.Socket.Types.PortNumber
    -> Network.Socket.Types.SockAddr
    -> GHC.Types.IO ()
  {- Arity: 4, Strictness: <L,U><L,1*U(U)><S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.handleHeloText1
                  `cast`
                (<GHC.IO.Handle.Types.Handle>_R
                 ->_R <Network.Socket.Types.PortNumber>_R
                 ->_R <Network.Socket.Types.SockAddr>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
9e94b48500a1470f99710a7e88ad049f
  handleHeloText1 ::
    GHC.IO.Handle.Types.Handle
    -> Network.Socket.Types.PortNumber
    -> Network.Socket.Types.SockAddr
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,U><L,1*U(U)><S,U><S,U>,
     Unfolding: (\ (hdl :: GHC.IO.Handle.Types.Handle)
                   (serverPort :: Network.Socket.Types.PortNumber)
                   (sockAddr :: Network.Socket.Types.SockAddr)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Network.Socket.$fShowSockAddr7
                        (GHC.Types.[] @ Network.Socket.NameInfoFlag)
                        GHC.Types.True
                        GHC.Types.False
                        sockAddr
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) ds ds2 ->
                 case ds of wild1 {
                   GHC.Base.Nothing
                   -> GHC.Prim.raiseIO#
                        @ GHC.Exception.SomeException
                        @ ()
                        Main.handleHeloText3
                        ipv
                   GHC.Base.Just hostName
                   -> GHC.IO.Handle.Text.hPutStr2
                        hdl
                        (GHC.CString.unpackAppendCString#
                           "HELO text\n\
                           \IP: "#
                           (GHC.Base.++
                              @ GHC.Types.Char
                              hostName
                              (GHC.CString.unpackAppendCString#
                                 "\n\
                                 \Port:"#
                                 (case serverPort
                                         `cast`
                                       (Network.Socket.Types.N:PortNumber[0]) of ww { GHC.Word.W16# ww1 ->
                                  case {__pkg_ccall network-2.6.3.2@network-2.6.3.2-F0OcsS89osODGCGHNf1FTk ntohs GHC.Prim.Word#
                                                                                                                 -> GHC.Prim.State#
                                                                                                                      GHC.Prim.RealWorld
                                                                                                                 -> (# GHC.Prim.State#
                                                                                                                         GHC.Prim.RealWorld,
                                                                                                                       GHC.Prim.Word# #)}
                                         ww1
                                         GHC.Prim.realWorld# of wild2 { (#,#) ds3 ds4 ->
                                  case GHC.Show.$wshowSignedInt
                                         0#
                                         (GHC.Prim.word2Int# (GHC.Prim.narrow16Word# ds4))
                                         (GHC.Types.[] @ GHC.Types.Char) of ww2 { (#,#) ww3 ww4 ->
                                  GHC.Base.++
                                    @ GHC.Types.Char
                                    (GHC.Types.: @ GHC.Types.Char ww3 ww4)
                                    Main.handleHeloText2 } } }))))
                        GHC.Types.True
                        ipv } } }) -}
d1afd61e8b2ec4bb7074053d525c076b
  handleHeloText2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "\n\
                   \StudentID:13324902\n"#) -}
ff7d799d7572db981ed70d008f5becbe
  handleHeloText3 :: GHC.Exception.SomeException
  {- Unfolding: (GHC.IO.Exception.$fExceptionIOException_$ctoException
                   Main.handleHeloText4) -}
e5b7b8ea59a64b430effa46c39f2ef5c
  handleHeloText4 :: GHC.IO.Exception.IOException
  {- Unfolding: (GHC.IO.Exception.IOError
                   (GHC.Base.Nothing @ GHC.IO.Handle.Types.Handle)
                   GHC.IO.Exception.UserError
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.handleHeloText5
                   (GHC.Base.Nothing @ Foreign.C.Types.CInt)
                   (GHC.Base.Nothing @ GHC.IO.FilePath)) -}
60ec0e37f1c1810793767d40f33215a6
  handleHeloText5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Pattern match failure in do expression at app\\Main.hs:94:5-22"#) -}
12b1b9b2d24dad1420d309910aa2c423
  leaveOrMessageHandler ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Base.String
    -> GHC.Base.String
    -> (GHC.Base.String -> GHC.Types.IO ())
    -> GHC.Types.IO ()
    -> GHC.Types.IO ()
  {- Arity: 6,
     Strictness: <S,U><L,1*U><L,1*U><L,1*C1(C1(U(U,A)))><L,1*C1(U(U,U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.leaveOrMessageHandler1
                  `cast`
                (<GHC.IO.Handle.Types.Handle>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String -> GHC.Types.IO ()>_R
                 ->_R <GHC.Types.IO ()>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
198e0558eca6f22dac4ef53d02be2b62
  leaveOrMessageHandler1 ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Base.String
    -> GHC.Base.String
    -> (GHC.Base.String -> GHC.Types.IO ())
    -> GHC.Types.IO ()
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <S,U><L,1*U><L,1*U><L,1*C1(C1(U(U,A)))><L,1*C1(U(U,U))><S,U>,
     Unfolding: (\ (hdl :: GHC.IO.Handle.Types.Handle)
                   (chatroomKey :: GHC.Base.String)
                   (chatroom :: GHC.Base.String)
                   (broadcast :: GHC.Base.String -> GHC.Types.IO ())
                   (loop :: GHC.Types.IO ())
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        hdl
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        eta of ds { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        hdl
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 case GHC.Base.eqString
                        chatroomKey
                        Main.leaveOrMessageHandler4 of wild {
                   GHC.Types.False
                   -> Main.leaveOrMessageHandler3
                        hdl
                        chatroom
                        (case ipv3 of wild1 {
                           [] -> case GHC.List.init2 ret_ty GHC.Base.String of {}
                           : x xs
                           -> GHC.List.dropWhile
                                @ GHC.Types.Char
                                Main.leaveOrMessageHandler2
                                (GHC.List.init1 @ GHC.Types.Char x xs) })
                        broadcast
                        loop
                        ipv2
                   GHC.Types.True
                   -> GHC.IO.Handle.Text.hPutStr2
                        hdl
                        (GHC.CString.unpackAppendCString#
                           "DISCONNECT: 0\n\
                           \PORT: 0\n\
                           \CLIENT_NAME:"#
                           (case ipv3 of wild1 {
                              [] -> case GHC.List.init2 ret_ty [GHC.Types.Char] of {}
                              : x xs
                              -> GHC.List.dropWhile
                                   @ GHC.Types.Char
                                   Main.leaveOrMessageHandler2
                                   (GHC.List.init1 @ GHC.Types.Char x xs) }))
                        GHC.Types.True
                        ipv2 } } }) -}
11d6ce6499b0d02deafc7597f272dc87
  leaveOrMessageHandler2 :: GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Types.Char) ->
                 case ds of wild { GHC.Types.C# x ->
                 case x of wild1 {
                   DEFAULT -> GHC.Types.True ' '# -> GHC.Types.False } }) -}
2b369fb4c4b849c97089ebe825baf11f
  leaveOrMessageHandler3 ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Base.String
    -> GHC.Base.String
    -> (GHC.Base.String -> GHC.Types.IO ())
    -> GHC.Types.IO ()
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*C1(C1(U(U,A)))><L,1*C1(U(U,U))><S,U>,
     Unfolding: (\ (hdl :: GHC.IO.Handle.Types.Handle)
                   (chatroom :: GHC.Base.String)
                   (clientName :: GHC.Base.String)
                   (broadcast :: GHC.Base.String -> GHC.Types.IO ())
                   (loop :: GHC.Types.IO ())
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        hdl
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        eta of ds { (#,#) ipv ipv1 ->
                 case (broadcast
                         (GHC.CString.unpackAppendCString#
                            "CHAT:"#
                            (GHC.Base.++
                               @ GHC.Types.Char
                               chatroom
                               (GHC.CString.unpackAppendCString#
                                  "\n\
                                  \CLIENT_NAME:"#
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     clientName
                                     (GHC.CString.unpackAppendCString#
                                        "\n\
                                        \MESSAGE:"#
                                        (case ipv1 of wild {
                                           [] -> case GHC.List.init2 ret_ty [GHC.Types.Char] of {}
                                           : x xs
                                           -> GHC.List.dropWhile
                                                @ GHC.Types.Char
                                                Main.leaveOrMessageHandler2
                                                (GHC.List.init1 @ GHC.Types.Char x xs) })))))))
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 loop `cast` (GHC.Types.N:IO[0] <()>_R) ipv2 } }) -}
b7ce826ed9d0053fb30e9557c5b78aca
  leaveOrMessageHandler4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LEAVE_CHATROOM"#) -}
39506938af1b47271158e1a64751ce4a
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
81a6cca2316a074c8a2dd9f02b09be98
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Environment.getArgs2 s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   GHC.Base.Nothing
                   -> case GHC.Environment.getFullArgs1
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case Network.Socket.$wsocket
                             Network.Socket.Types.AF_INET
                             Network.Socket.Types.Stream
                             0#
                             ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                      Main.main2 ipv5 ipv4 } }
                   GHC.Base.Just argv
                   -> case Network.Socket.$wsocket
                             Network.Socket.Types.AF_INET
                             Network.Socket.Types.Stream
                             0#
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      Main.main2 ipv3 ipv2 } } }) -}
fa549747446e1d38eb740f4402d7932d
  main2 ::
    Network.Socket.Types.Socket
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U(U(U),U,U,U(U),U(U))><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Network.Socket.Types.Socket)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 Main.$wlvl ww1 ww2 ww3 ww4 ww5 w1 }) -}
b037fe27b327200ec46ac4e834776a0f
  main3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
96b7cf2f69c11fc40fcc52d5f93339b0
  main4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
646c237196ab0b655d8bb007a02160fd
  main5 :: Network.Socket.Types.SockAddr
  {- Strictness: m1,
     Unfolding: (Network.Socket.Types.SockAddrInet
                   Main.main_serverPort
                   Network.Socket.iNADDR_ANY) -}
023e5ea7e07bd75867fc0068506b83b8
  main6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
a28e31f0c8e906efc399e63a55425bf3
  mainLoop ::
    Network.Socket.Types.Socket
    -> Network.Socket.Types.PortNumber
    -> Control.Concurrent.Chan.Chan Main.Msg
    -> GHC.Types.Int
    -> GHC.Types.IO ()
  {- Arity: 5,
     Strictness: <S(LSLLS(S)),1*U(U(U),U,U,U(U),U(U))><L,U(U)><L,U(U,U)><L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.mainLoop1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <Network.Socket.Types.PortNumber>_R
                 ->_R <Control.Concurrent.Chan.Chan Main.Msg>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
682cc56b835c3b34be576cff5edfa590
  mainLoop1 ::
    Network.Socket.Types.Socket
    -> Network.Socket.Types.PortNumber
    -> Control.Concurrent.Chan.Chan Main.Msg
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <S(LSLLS(S)),1*U(U(U),U,U,U(U),U(U))><L,U(U)><L,U(U,U)><L,U(U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: Network.Socket.Types.Socket)
                   (w1 :: Network.Socket.Types.PortNumber)
                   (w2 :: Control.Concurrent.Chan.Chan Main.Msg)
                   (w3 :: GHC.Types.Int)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                 Main.$wmainLoop ww1 ww2 ww3 ww4 ww7 w1 w2 w3 w4 } }) -}
f28504578a84e7302a74400a1c3d1cae
  main_serverPort :: Network.Socket.Types.PortNumber
  {- Unfolding: (case {__pkg_ccall network-2.6.3.2@network-2.6.3.2-F0OcsS89osODGCGHNf1FTk htons GHC.Prim.Word#
                                                                                                -> GHC.Prim.State#
                                                                                                     GHC.Prim.RealWorld
                                                                                                -> (# GHC.Prim.State#
                                                                                                        GHC.Prim.RealWorld,
                                                                                                      GHC.Prim.Word# #)}
                        4242##
                        GHC.Prim.realWorld# of wild1 { (#,#) ds ds1 ->
                 (GHC.Word.W16# (GHC.Prim.narrow16Word# ds1))
                   `cast`
                 (Sym (Network.Socket.Types.N:PortNumber[0])) }) -}
e0ae782c2e04c04df20622f1f03f50d0
  messageHandler ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Base.String
    -> GHC.Base.String
    -> (GHC.Base.String -> GHC.Types.IO ())
    -> GHC.Types.IO ()
    -> GHC.Types.IO ()
  {- Arity: 6,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*C1(C1(U(U,A)))><L,1*C1(U(U,U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.leaveOrMessageHandler3
                  `cast`
                (<GHC.IO.Handle.Types.Handle>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String -> GHC.Types.IO ()>_R
                 ->_R <GHC.Types.IO ()>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
4c06ec3fcfad58d58e6d439f81a09d10
  runConn ::
    (Network.Socket.Types.Socket, Network.Socket.Types.SockAddr)
    -> Control.Concurrent.Chan.Chan Main.Msg
    -> GHC.Types.Int
    -> Network.Socket.Types.Socket
    -> Network.Socket.Types.PortNumber
    -> GHC.Types.IO ()
  {- Arity: 6,
     Strictness: <S(S(LLLLS(S))L),1*U(1*U(U(U),A,A,A,1*U(U)),U)><L,1*U(U,U)><L,U(U)><L,U(U(U),A,A,A,U(U))><L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.runConn1
                  `cast`
                (<(Network.Socket.Types.Socket, Network.Socket.Types.SockAddr)>_R
                 ->_R <Control.Concurrent.Chan.Chan Main.Msg>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <Network.Socket.Types.Socket>_R
                 ->_R <Network.Socket.Types.PortNumber>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
45c5d16dfc88d2871103f0eea05e5786
  runConn1 ::
    (Network.Socket.Types.Socket, Network.Socket.Types.SockAddr)
    -> Control.Concurrent.Chan.Chan Main.Msg
    -> GHC.Types.Int
    -> Network.Socket.Types.Socket
    -> Network.Socket.Types.PortNumber
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <S(S(LLLLS(S))L),1*U(1*U(U(U),A,A,A,1*U(U)),U)><L,1*U(U,U)><L,U(U)><L,U(U(U),A,A,A,U(U))><L,U(U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ (w :: (Network.Socket.Types.Socket,
                          Network.Socket.Types.SockAddr))
                   (w1 :: Control.Concurrent.Chan.Chan Main.Msg)
                   (w2 :: GHC.Types.Int)
                   (w3 :: Network.Socket.Types.Socket)
                   (w4 :: Network.Socket.Types.PortNumber)
                   (w5 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { Network.Socket.Types.MkSocket ww4 ww5 ww6 ww7 ww8 ->
                 case ww8 of ww9 { GHC.MVar.MVar ww10 ->
                 Main.$wrunConn ww4 ww10 ww2 w1 w2 w3 w4 w5 } } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

